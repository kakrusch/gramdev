DEMO   ENGLISH   CONFIG (1.0)
ROOTCAT    ROOT.
FILES  common.templates.lfg .
LEXENTRIES   (FIRST ENGLISH) (MORPH ENGLISH).
TEMPLATES (DEMO ENGLISH)(STANDARD COMMON). 
RULES   (DEMO ENGLISH) (MORPH ENGLISH).
MORPHOLOGY (DEMO ENGLISH).
GOVERNABLERELATIONS    SUBJ OBJ OBJ2 COMP XCOMP OBL OBL-?+.
SEMANTICFUNCTIONS    ADJUNCT TOPIC FOCUS POSS STANDARD.
NONDISTRIBUTIVES    NUM PERS CONJ-FORM.
EPSILON   e.
OPTIMALITYORDER NOGOOD OblPas PPadj.

----
DEMO ENGLISH MORPHOLOGY (1.0)

TOKENIZE:
P!basic-parse-tok.fst G!default-gen-tokenizer.fst

ANALYZE:
english.infl.patch.full.fst

----

DEMO   ENGLISH   RULES (1.0)

ROOT --> { S | Simp | Stop}.

Simp --> e: (^ SUBJ PRED) = 'pro'
	    (^ SUBJ PERS) = 2; 
 	  VP: (^TENSE) = pres;
 	  EXCL.


Stop --> {NP: 	(^ TOPIC) = !
		(^ {XCOMP|COMP}* {OBJ|OBJ2}) = !
		|CP: (^ TOPIC) = !
		(^ {XCOMP|COMP}) = ! }  "works for comp but not xcomp"
	    (COMMA) S.



S -->   NP: (^SUBJ) = !
            (!CASE) = nom;
        VP: (^ TENSE);
	(PERIOD).

VP -->  (AUX)
	ADVP*: !$(^ADJUNCT); 
        V: ^ = !;
        (NP:(^OBJ) = ! (! CASE)=acc)
        (NP: (^OBJ2) = !)
	(PP: (^ OBL-TO) = !
	     (! PFORM) =c to)
	(PP: (^ OBL-AG) = ! (! PFORM) =c by)
	PP*: { ! $ (^ ADJUNCT) 
		   (! PTYPE) =c sem 
		@(OT-MARK PPadj) "disprefer adjunct PPs"
	     | (^ OBL) = ! "or a general oblique"
	       };
	({ CP: (^ COMP) = !
 	  |
 	   VPinf: (^XCOMP) = !
	    	  (^ VFORM) = inf
	}).

	
CP -->  C S. 

VPinf --> PARTinf VP. 


ADVP --> ADV.

AP --> A.

NP -->  {({D | PRON})
 	AP*: ! $ (^ ADJUNCT); 
 	N			
	| PRON}.


PP --> { P:   ^ = ! 
	     (! PTYPE) =c sem; 
 	 NP: (^ OBJ) = !
	     (! CASE) = acc
 	| P: ^ = !  
	     (! PTYPE) =c nosem;  	    
	  NP
 	  }. 




METARULEMACRO(_CAT _BASECAT _RHS) = "applies to all rules in the grammar"

    { "just use the rule as stated"
      "don't do anything to it; ALWAYS include this option"

      _RHS

     |"if it is an NP or an N, pass it to the NP
      coordination rule"
      "COM{EX RULE NP: the girl and the boy}"

      e: _CAT $c { NP N };
      @(NPCOORD _CAT)

     |e: _CAT $c { ADVP AP };
      @(ACOORD _CAT)

     |"if it is any other category, pass it to
      the same category coordination rule"
      "COM{EX RULE S: the girl sleeps and walks.}"
      "COM{EX RULE PP: with the girl and in the park}"

      e: _CAT ~$ { NP N ADVP AP};
      @(SCCOORD _CAT)
    }.


"Coordination rules"

NPCOORD(_CAT) = "coordination of nominals"
   "COM{EX RULE NP: girls and boys}"
   "This differs from SCCOORD in that the conjunction provides NUM pl to
   the resulting coordinated f-structure and the person features are
   resolved for the noun phrase."

   _CAT: @IN-SET  "first nominal"
         @NP-CONJUNCT; "calls person resolution template"

   CONJnp: @PUSHUP; "conjunction"
           "PUSHUP avoids vacuous ambiguity in constructions like:
            COM{EX RULES NP: girls and boys}"

   _CAT: @IN-SET "second nominal"
         @NP-CONJUNCT.

SCCOORD(_CAT) = "coordination of non-nominals"
  "COM{EX RULES PP: with girls and with boys}"
  "COM{EX RULES S: girls sleep and boys sleep.}"
  "no features other than a COORD-FORM are provided to the coordinated
  f-structure."

   _CAT: @IN-SET; "first constituent"
   (COMMA: @(OT-MARK GenBadPunct)) "optional comma; 
                                    disprefered in generation"
                       "COM{EX RULES S: girls sleep, and boys sleep.}"

   CONJ: @PUSHUP; "conjunction"
         "PUSHUP avoids vacuous ambiguity in constructions like:
         COM{EX RULES S: boys walk and sleep.}" 

   _CAT: @IN-SET "second constituent".


ACOORD(_CAT) = 
   _CAT: @IN-SET; "first constituent"
   {COMMA | CONJ: @PUSHUP}
   _CAT: @IN-SET "second constituent".


----

DEMO ENGLISH TEMPLATES (1.0)

NP-CONJUNCT = "called by the NP coordination rule to get the number"
	  "person, and case correct"
	  "COM{EX TEMPLATE NP: a cat and a dog}"
	  
	  
	  { (! PERS)=c 1 "if any conjunct is first person,"
	    @(PERS 1) "the whole NP is first person"
	    
	   |(! PERS)=c 2 "if any conjunct is second person,"
	    { (^ PERS)=c 1 "the whole NP is second person"
	     |(^ PERS)=2} "unless there was a first person conjunct"
	    
	   |(! PERS)=c 3
	    { (^ PERS)=c 1
	     |(^ PERS)=c 2
	     |@(PERS 3)}} "third person if both conjuncts are"
	  
	  { (! NUM)=c pl "if have plural conjunct, whole NP is plural"
	    @(NUM pl) 
           |(! NUM)=c sg }
	    "number with singular depends on conjunction (e.g., and vs. or)".


VPRES = { (^VFORM) ~= inf
	    (^TENSE) = pres
	    (^MOOD) = indicative
	  | (^VFORM) = inf}.

VPAST = (^TENSE) = past
	(^MOOD) = indicative.

PRES3SG = (^TENSE) = pres
	  (^ SUBJ PERS) = 3  
	  (^ SUBJ NUM) = sg.


BARE-AGR = { (^VFORM) ~= inf 
	    { (^ SUBJ NUM) = pl 
	    | (^ SUBJ PERS) ~= 3
	      (^ SUBJ NUM) = sg
	    }
	  | (^VFORM) = inf}.

PAS-TE-PAR = {(^ TENSE) = past
	      |(^PARTICIPLE) = past}.


"Subcategorization frames"
TRANS(P) = @(PASS (^PRED) ='P<(^SUBJ)(^OBJ)>').

INTRANS(P) = (^PRED) = 'P<(^SUBJ)>'.

DITRANS(P) =  @(PASS @(DAT-SHIFT   
              (^PRED)='P<(^SUBJ)(^OBJ)(^OBL-TO)>')).


OPT-TRANS(P) = {@(TRANS P)
                |@(INTRANS P)}.

INTRANS-OBL(P) = (^ PRED) = 'P<(^SUBJ)(^OBL)>'.

"noun"
COMMON-NOUN-PNC(P N C) =(^PRED) = 'P'
   			(^NUM) = N
			(^PERS) = 3
			(^NTYPE NSYN) = common
			(^NTYPE NSEM COMMON)=C.

PROPER-NOUN-PNC(P N C) = (^PRED) = 'P'
   			 (^NUM) = N
			 (^PERS) = 3
			 (^NTYPE NSYN) = proper
			 (^NTYPE NSEM PROPER) = C.


"pronouns"
PRON(P N Z T) =   (^ PRED) = 'P'
	  	  (^ NUM) = N
	  	  (^ PERS) = Z
	  	  (^ PRON-TYPE) = T
	  	  (^ NTYPE) = pronoun. 

POSS-PRON(P N Z) =(^ POSS PRED) = 'P'
	  	  (^ POSS NUM) = N
	  	  (^ POSS PERS) = Z
	  	  (^ POSS PRON-TYPE) = poss
	  	  (^ POSS NTYPE) = pronoun. 

S-AGR = (^ SUBJ PERS) = 3  "for verbs in -s"
	(^ SUBJ NUM) = sg. 

"prepositions"
PREP(P) = { (^ PRED) = 'P<(^OBJ)>' 	"adjunct"
	    (^ PTYPE) = sem
	  | (^ PTYPE) = nosem		"obj, obl"
	    (^ PFORM) = P}.


"dative-shift"
DAT-SHIFT(SCHEMATA) = { SCHEMATA | SCHEMATA (^ OBJ)-->(^ OBJ2)
                   			(^ OBL-TO)-->(^ OBJ)}.

"passive"
PASS(FRAME) = {FRAME (^PASSIVE) = - 
              |FRAME (^PASSIVE) = +
                     (^PARTICIPLE) =c past
                     (^OBJ) --> (^SUBJ)
                     {(^SUBJ) --> (^OBL-AG) | (^SUBJ)--> NULL @(OT-MARK OblPas)}
              }.


"OT marks"
OT-MARK(_mark) =  _mark $ o::*.	"assigns an OT mark, from common templates"
      


----
	

FIRST ENGLISH LEXICON (1.0)

"nouns"

bed 	N-S	XLE 	(^ PRED) = '%stem'
			(^ NTYPE) = count.

banana 	N-S	XLE 	(^ PRED) = '%stem'
			(^ NTYPE) = count.

cake		N * @(COMMON-NOUN-PNC cake sg count).

meal		N * @(COMMON-NOUN-PNC meal sg count).

meals		N * @(COMMON-NOUN-PNC meal pl count).

cat		N * @(COMMON-NOUN-PNC cat sg count).

book		N * @(COMMON-NOUN-PNC book sg count).

dog		N * @(COMMON-NOUN-PNC dog sg count).

owner		N * @(COMMON-NOUN-PNC owner sg count).

child		N * @(COMMON-NOUN-PNC child sg count).

garden		N * @(COMMON-NOUN-PNC garden sg count).

coffee 		N * @(COMMON-NOUN-PNC coffee sg count).

tiger 		N * @(COMMON-NOUN-PNC tiger sg count).

cheetah 	N * @(COMMON-NOUN-PNC cheetah sg count). 

deer		N * @(COMMON-NOUN-PNC deer sg mass).

exam 		N * @(COMMON-NOUN-PNC exam sg count).

"bananas		N * @(COMMON-NOUN-PNC banana pl count)."

gorilla		N * @(COMMON-NOUN-PNC gorilla sg count).

robot 		N * @(COMMON-NOUN-PNC robot sg count).

leopards 	N * @(COMMON-NOUN-PNC leopard pl count). 

waiter 		N * @(COMMON-NOUN-PNC waiter sg count).

restaurant 	N * @(COMMON-NOUN-PNC restaurant sg count).

customers	N * @(COMMON-NOUN-PNC customer pl count).


Mary		N * @(PROPER-NOUN-PNC Mary sg count).

Sophie		N * @(PROPER-NOUN-PNC Sophie sg count).



"pronouns"

She	PRON * 	    @(PRON she sg 3 pers)
		    (^CASE) = nom.

she	PRON * 	    @(PRON she sg 3 pers)
		    (^CASE) = nom.

Her	PRON * 	    {@(PRON she sg 3 pers)
		    (^CASE) = acc
		    |@(POSS-PRON she sg 3)}.

her	PRON * 	    {@(PRON she sg 3 pers)
		    (^CASE) = acc
		    |@(POSS-PRON she sg 3)}.


He 	PRON *      @(PRON he sg 3 pers)
		    (^CASE) = nom.

he 	PRON *      @(PRON he sg 3 pers)
		    (^CASE) = nom.

I	PRON *      @(PRON I sg 1 pers)
		    (^CASE) = nom.

You	PRON *      @(PRON you sg 2 pers)
		    (^CASE) = nom.

you	PRON *      @(PRON you sg 2 pers)
		    (^CASE) = nom.

My 	PRON * 	    @(POSS-PRON I sg 1).

my 	PRON * 	    @(POSS-PRON I sg 1).


"interrogative pronouns"

Who	PRON *      @(PRON who sg 3 int).



"verbs"

eat       V-S XLE @(OPT-TRANS %stem). 


like	V-S XLE  @(TRANS %stem).


say	V-S  XLE  (^ PRED) ='%stem<(^ SUBJ)(^ COMP)>'.


hug	V-S  XLE  @(TRANS %stem).


appear 	  V-S XLE @(INTRANS %stem).

catch      V-S XLE @(TRANS %stem).

jump     V-S XLE @(INTRANS %stem).


wait		V-S XLE	{ @(INTRANS %stem) |
			@(INTRANS-OBL %stem)
			(^ OBL PFORM) =c on
			(^ PSEM) = nosem }.	"was =c nosem but that does not generate the obl parse"

prepare	V-S XLE	@(TRANS %stem).

take    V-S XLE @(TRANS	%stem).


sleep  V-S XLE @(INTRANS %stem).

feed   V-S XLE @(TRANS %stem).  "could be ditrans"

have   V-S XLE @(TRANS %stem).

sleep   V-S XLE @(INTRANS %stem).

educate V-S XLE @(TRANS %stem).



"illegal with runs"
run     V-S XLE (^ PRED) ='%stem<(^ SUBJ)(^ XCOMP)>'
	      		(^ SUBJ) = (^ XCOMP SUBJ).



"embedding verbs are weird with non-3rd person singular"
convince  	V-S     XLE 	(^ PRED) = '%stem<(^ SUBJ)(^ OBJ)(^ XCOMP)>'
	      		(^ OBJ) = (^ XCOMP SUBJ).


persuade  V-S     XLE  (^ PRED) = '%stem<(^ SUBJ)(^ OBJ)(^ XCOMP)>'
	                    (^ OBJ) = (^ XCOMP SUBJ).


try 	  V-S     XLE  (^ PRED) = '%stem<(^ SUBJ)(^ XCOMP)>'
                       (^ XCOMP SUBJ) = (^SUBJ).


seem V-S XLE (^ PRED) = 'seem<(^XCOMP)>(^SUBJ)'
         (^ XCOMP SUBJ) = (^ SUBJ).




"Adjectives"
grey		A *   	(^PRED) = 'grey'.

tiny		A *   	(^PRED) = 'tiny'.

black 		A *   	(^PRED) = 'black'.

kind 		A *   	(^PRED) = 'kind'.

bright 		A *   	(^PRED) = 'bright'.

efficient 	A *   	(^PRED) = 'efficient'.

intelligent 	A *   	(^PRED) = 'intelligent'.

lazy		A *   	(^PRED) = 'lazy'.


"adverbs ADV"
slowly		ADV *   (^PRED) = 'slowly'.

joyfully	ADV *   (^PRED) = 'joyfully'.

quickly		ADV *   (^PRED) = 'quickly'.


"determiners"
The 		D * 	(^DEF) = +.

the 		D * 	(^DEF) = +.

a        	D *   	(^DEF) = -
			(^ NUM) = sg.

A		D *   	(^DEF) = -
			(^ NUM) = sg.

an		D *   	(^DEF) = -
			(^ NUM) = sg.   


"other function words"
was   AUX*	(^TENSE)=past
	  	(^PARTICIPLE) = past
              	{(^SUBJ PERS) = 1 | (^SUBJ PERS) = 3}
              	(^SUBJ NUM) = sg.

were  AUX*	(^TENSE)=past
	  	(^PARTICIPLE) = past
              	(^SUBJ NUM) = pl.

to    PARTinf *	(^ VFORM) =c inf;
      P *	@(PREP to).

and 	  CONJ * (^ COORD-FORM) = and;
	  CONJnp * (^ COORD-FORM) = and
		   (^ NUM) = pl.

that  C * (^COMP-FORM) = that.

"prepositions"

by    P *      	@(PREP by).

in    P *	@(PREP in).

for   P *	@(PREP for).

on    P *     	@(PREP on).

at    P *      	@(PREP at).




"punctuation"

. PERIOD * (^ STMT-TYPE) = declarative. 

, COMMA  * . 

!  EXCL * (^ STMT-TYPE) = exclamation. 

?  QUEST * (^ STMT-TYPE) = interrogative.

----

MORPH ENGLISH RULES (1.0)

"sample rule"

"this deals with verbs.  
The sublexcial items are the POS assigned to the various tags in morph-lex.lfg" 

   V --> V-S_BASE "verb stem, e.g. run"
 	 V-POS_BASE "suffix saying that this is a verb: +Verb"
 	 { TNS_BASE "tense suffix, e.g. +Pres" 
 	   PERS_BASE "person suffix, e.g. +3sg"
	 | ASP_BASE}.   "aspectual information"

  
   N --> N-S_BASE "noun stem"
	 N-POS_BASE
	 (N-NAME_BASE)  "allow for +Giv or +Place in names"
         (N-GEND_BASE)  "allow for gender information" 
	 N-NUM_BASE. 

   A --> ADJ-S_BASE
 	 ADJ-POS_BASE.
	 
   ADV --> ADV-S_BASE
 	  ADV-POS_BASE.

----
MORPH ENGLISH LEXICON (1.0)

"this guesses words that are unknown to your lexicon
 to be either adjectives or nouns"

-unknown  ADJ-S XLE (^ PRED) = '%stem';
	  N-S XLE (^ PRED) = '%stem'.

"lexical entries for tags coming out of the morphological analyzer" 

+Verb	V-POS XLE .

+Pres   TNS XLE @VPRES.

+3sg	PERS XLE @S-AGR.

+PastBoth TNS XLE "past tense or past particle"
		 { @VPAST | (^PARTICIPLE) = past }. 
+123SP	PERS XLE .

+Non3sg PERS XLE @BARE-AGR.

+Prog	ASP XLE (^ ASPECT PROG) = +.  

+PastPerf TNS XLE (^PARTICIPLE) = past.

+PastTense TNS XLE @VPAST.

+Noun   N-POS XLE (^ NTYPE) = count "3rd person count noun"
		    @(PERS 3). 

+Prop 	  N-POS XLE (^ NTYPE) = name "3rd person name"
		    @(PERS 3).   

+Giv   N-NAME XLE .   "for given names, no info associated so far"

+Pl   N-NUM XLE (^ NUM) = pl. 

+Sg  N-NUM XLE (^ NUM) = sg. 

+Fem N-GEND XLE (^GEND) = fem. 

+Masc N-GEND XLE (^GEND) = masc. 


+Adj 	  ADJ-POS XLE .

+Adv 	  ADV-POS XLE .

----